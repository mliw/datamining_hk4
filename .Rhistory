else{
return (0)
}
}
else {
return (0)
}
}
labor_filter$college_1_2=apply(array(labor_filter$educ),1,college_12)
#(iv) Completed exactly 4 years of college;
# Generate college_4
college_4_func = function(my_str){
my_str = as.character(my_str)
if (grepl("college",my_str) & grepl("4",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$college_4=apply(array(labor_filter$educ),1,college_4_func)
# (v) Completed 5+ years of college
# Generate college_5
college_5_func = function(my_str){
my_str = as.character(my_str)
if (grepl("college",my_str) & grepl("5",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$college_5=apply(array(labor_filter$educ),1,college_5_func)
# The code to test the correctness of functions
# for (i in 1:length(unique(labor_filter$educ))){
#   my_str=as.character(unique(labor_filter$educ)[i])
#   print(my_str)
#   print(college_5_func(my_str))
# }
# unique(labor_filter$occ)[order(unique(labor_filter$occ))]
library(nnet)
change_code_to_job = function(num){
if (num==0){
return("Not_Applicable")
}
else if (num>=10 & num<=960){
return("Management_Business_Financial_Occupations")
}
else if (num>=1000 & num<=1980){
return("Computer_Engineering_and_Science_Occupations")
}
else if (num>=2001 & num<=2920){
return("Education_Legal_Community_Service_Arts_and_Media_Occupations")
}
else if (num>=3000 & num<=3550){
return("Healthcare_Practitioners_and_Technical_Occupations")
}
else if (num>=3600 & num<=4655){
return("Service_Occupations")
}
else if (num>=4700 & num<=4965){
return("Sales_and_Related_Occupations")
}
else if (num>=5000 & num<=5940){
return("Office_and_Administrative_Support_Occupations")
}
else if (num>=6005 & num<=6130){
return("Farming_Fishing_and_Forestry_Occupations")
}
else if (num>=6200 & num<=6950){
return("Construction_and_Extraction_Occupations")
}
else if (num>=7000 & num<=7640){
return("Installation_Maintenance_and_Repair_Occupations")
}
else if (num>=7700 & num<=8990){
return("Production_Occupations")
}
else if (num>=9005 & num<=9920){
return("Transportation_and_Material_Moving_Occupations")
}
}
labor_filter$occ_name = apply(array(labor_filter$occ),1,change_code_to_job)
tem = class.ind(labor_filter$occ_name)
new_name = c()
for (i in colnames(tem)){
new_name = c(new_name,paste("occname_",i,sep = ""))
}
colnames(tem) = new_name
labor_filter = cbind(labor_filter,tem)
is_public_sector_func = function(my_str){
my_str = as.character(my_str)
if (grepl("govt",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$is_public_sector=apply(array(labor_filter$classwkrd),1,is_public_sector_func)
logi_1 = as.character(labor_filter$wkswork2)!="n/a" # True if work more than 1 week last year
not_self_func = function(my_str){
my_str = as.character(my_str)
if (grepl("self",my_str)){
return (FALSE)
}
else {
return (TRUE)
}
}
logi_2 = apply(array(labor_filter$classwkrd),1,not_self_func) # True if not self-employed
not_unpay_func = function(my_str){
my_str = as.character(my_str)
if (grepl("unpaid",my_str)){
return (FALSE)
}
else {
return (TRUE)
}
}
logi_3 = apply(array(labor_filter$classwkrd),1,not_unpay_func) # True if not unpaid
logi = logi_1 & logi_2 & logi_3
logi = as.numeric(logi)
labor_filter$wage_worker_last_year = logi
map_hours_func = function(my_str){
my_str = as.character(my_str)
if (my_str == "n/a"){
return (0)
}
else {
return (as.numeric(my_str))
}
}
hours = apply(array(labor_filter$uhrswork),1,map_hours_func)
labor_filter$uhrswork = hours
map_weeks_func = function(my_str){
my_str = as.character(my_str)
if (my_str == "n/a"){
return (0)
}
else {
before = as.numeric(strsplit(my_str, "-", fixed=TRUE)[[1]][1])
after = strsplit(my_str, "-", fixed=TRUE)[[1]][2]
after = as.numeric(strsplit(after, " ", fixed=TRUE)[[1]][1])
return ((before+after)/2)
}
}
weeks = apply(array(labor_filter$wkswork2),1,map_weeks_func)
labor_filter$annual_hours_worked = weeks*hours
# check if the program is right
# for (i in unique(labor_filter$wkswork2)){
#   print(i)
#   print(map_weeks_func(i))
# }
labor_filter$nonlabor_income = labor_filter$ftotinc-labor_filter$incwage
labor_filter$hourly_wage = labor_filter$incwage/labor_filter$annual_hours_worked
labor_filter$log_annual_hours_worked = log(1+labor_filter$annual_hours_worked)
min_nonlabor = abs(min(labor_filter$nonlabor_income))+1
labor_filter$log_nonlabor_income = log(min_nonlabor+labor_filter$nonlabor_income)
labor_filter$log_hourly_wage = log(labor_filter$hourly_wage+1)
get_educ_years = function(my_str){
if (my_str=="grade 12"){
return(12)
}
else if (my_str=="grade 11"){
return(11)
}
else if (my_str=="4 years of college"){
return(16)
}
else if (my_str=="1 year of college"){
return(13)
}
else if (my_str=="2 years of college"){
return(14)
}
else if (my_str=="n/a or no schooling"){
return(0)
}
else if (my_str=="5+ years of college"){
return(17)
}
else if (my_str=="grade 5, 6, 7, or 8"){
return(6.5)
}
else if (my_str=="grade 10"){
return(10)
}
else if (my_str=="grade 9"){
return(9)
}
else if (my_str=="nursery school to grade 4"){
return(4)
}
else{
return(0)
}
}
labor_filter$educ_years = apply(array(labor_filter$educ),1,get_educ_years)
labor_filter$num_age =as.numeric(labor_filter$age)
labor_filter$potential_experience =  labor_filter$num_age-labor_filter$educ_years-6
labor_filter$potential_experience_sq = (labor_filter$potential_experience)*(labor_filter$potential_experience)
stata_data = labor_filter[labor_filter$wage_worker_last_year==1,]
write.dta(stata_data,"data/stata_data.dta")
stata_data
stata_data
colnames(stata_data)
stata_data$log_annual_hours_worked
stata_data$log_annual_hours_worked
stata_data$log_annual_hours_worked
stata_data$log_annual_hours_worked
colnames(stata_data)
stata_data$sex
stata_data$sex
stata_data$sex
stata_data$sex
stata_data$sex
stata_data$sex=="male"
as.numeric(stata_data$sex=="male")
as.numeric(stata_data$sex=="male")
stata_data$sex=="male"
as.numeric(stata_data$sex=="male")
knitr::opts_chunk$set(warning = TRUE)
library(RStata)
options("RStata.StataVersion" = 16)
options("RStata.StataPath" = "\"C:\\Program Files\\Stata16\\StataIC-64\"")
library(foreign)
labor_filter = read.dta("data/filter_labor.dta")
sq_func = function(num){
return(num*num)
}
labor_filter$age_sq = apply(array(labor_filter$numeric_age),1,sq_func)
filter_hispan = function(my_str){
my_str = as.character(my_str)
if (grepl("not",my_str)){
return (0)
}
else {
return (1)
}
}
labor_filter$is_hispanic = apply(array(labor_filter$hispan),1,filter_hispan)
filter_black = function(my_str){
my_str = as.character(my_str)
if (grepl("black",my_str)){
return (1)
}
else {
return (0)
}
}
filter_asia = function(my_str){
my_str = as.character(my_str)
if (grepl("asian",my_str) | grepl("chinese",my_str) | grepl("japanese",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$is_black=apply(array(labor_filter$race),1,filter_black)
labor_filter$is_asia=apply(array(labor_filter$race),1,filter_asia)
filter_married = function(my_str){
my_str = as.character(my_str)
if (grepl("married",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$current_married=apply(array(labor_filter$marst),1,filter_married)
# (i) Completed less than 12 years of schooling;
# Generate variable less_12_school
less_12 = function(my_str){
my_str = as.character(my_str)
if (!grepl("college",my_str)&!grepl("12",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$less_12_school=apply(array(labor_filter$educ),1,less_12)
#(ii) Completed exactly 12 years of schooling;
# Generate variable exact_12_school
exact_12 = function(my_str){
my_str = as.character(my_str)
if (grepl("12",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$exact_12_school=apply(array(labor_filter$educ),1,exact_12)
#(iii) Completed 1-2 years of college
# Generate college_1_2
college_12 = function(my_str){
my_str = as.character(my_str)
if (grepl("college",my_str)){
if (grepl("1",my_str)|grepl("2",my_str)){
return (1)
}
else{
return (0)
}
}
else {
return (0)
}
}
labor_filter$college_1_2=apply(array(labor_filter$educ),1,college_12)
#(iv) Completed exactly 4 years of college;
# Generate college_4
college_4_func = function(my_str){
my_str = as.character(my_str)
if (grepl("college",my_str) & grepl("4",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$college_4=apply(array(labor_filter$educ),1,college_4_func)
# (v) Completed 5+ years of college
# Generate college_5
college_5_func = function(my_str){
my_str = as.character(my_str)
if (grepl("college",my_str) & grepl("5",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$college_5=apply(array(labor_filter$educ),1,college_5_func)
# The code to test the correctness of functions
# for (i in 1:length(unique(labor_filter$educ))){
#   my_str=as.character(unique(labor_filter$educ)[i])
#   print(my_str)
#   print(college_5_func(my_str))
# }
# unique(labor_filter$occ)[order(unique(labor_filter$occ))]
library(nnet)
change_code_to_job = function(num){
if (num==0){
return("Not_Applicable")
}
else if (num>=10 & num<=960){
return("Management_Business_Financial_Occupations")
}
else if (num>=1000 & num<=1980){
return("Computer_Engineering_and_Science_Occupations")
}
else if (num>=2001 & num<=2920){
return("Education_Legal_Community_Service_Arts_and_Media_Occupations")
}
else if (num>=3000 & num<=3550){
return("Healthcare_Practitioners_and_Technical_Occupations")
}
else if (num>=3600 & num<=4655){
return("Service_Occupations")
}
else if (num>=4700 & num<=4965){
return("Sales_and_Related_Occupations")
}
else if (num>=5000 & num<=5940){
return("Office_and_Administrative_Support_Occupations")
}
else if (num>=6005 & num<=6130){
return("Farming_Fishing_and_Forestry_Occupations")
}
else if (num>=6200 & num<=6950){
return("Construction_and_Extraction_Occupations")
}
else if (num>=7000 & num<=7640){
return("Installation_Maintenance_and_Repair_Occupations")
}
else if (num>=7700 & num<=8990){
return("Production_Occupations")
}
else if (num>=9005 & num<=9920){
return("Transportation_and_Material_Moving_Occupations")
}
}
labor_filter$occ_name = apply(array(labor_filter$occ),1,change_code_to_job)
tem = class.ind(labor_filter$occ_name)
new_name = c()
for (i in colnames(tem)){
new_name = c(new_name,paste("occname_",i,sep = ""))
}
colnames(tem) = new_name
labor_filter = cbind(labor_filter,tem)
is_public_sector_func = function(my_str){
my_str = as.character(my_str)
if (grepl("govt",my_str)){
return (1)
}
else {
return (0)
}
}
labor_filter$is_public_sector=apply(array(labor_filter$classwkrd),1,is_public_sector_func)
logi_1 = as.character(labor_filter$wkswork2)!="n/a" # True if work more than 1 week last year
not_self_func = function(my_str){
my_str = as.character(my_str)
if (grepl("self",my_str)){
return (FALSE)
}
else {
return (TRUE)
}
}
logi_2 = apply(array(labor_filter$classwkrd),1,not_self_func) # True if not self-employed
not_unpay_func = function(my_str){
my_str = as.character(my_str)
if (grepl("unpaid",my_str)){
return (FALSE)
}
else {
return (TRUE)
}
}
logi_3 = apply(array(labor_filter$classwkrd),1,not_unpay_func) # True if not unpaid
logi = logi_1 & logi_2 & logi_3
logi = as.numeric(logi)
labor_filter$wage_worker_last_year = logi
map_hours_func = function(my_str){
my_str = as.character(my_str)
if (my_str == "n/a"){
return (0)
}
else {
return (as.numeric(my_str))
}
}
hours = apply(array(labor_filter$uhrswork),1,map_hours_func)
labor_filter$uhrswork = hours
map_weeks_func = function(my_str){
my_str = as.character(my_str)
if (my_str == "n/a"){
return (0)
}
else {
before = as.numeric(strsplit(my_str, "-", fixed=TRUE)[[1]][1])
after = strsplit(my_str, "-", fixed=TRUE)[[1]][2]
after = as.numeric(strsplit(after, " ", fixed=TRUE)[[1]][1])
return ((before+after)/2)
}
}
weeks = apply(array(labor_filter$wkswork2),1,map_weeks_func)
labor_filter$annual_hours_worked = weeks*hours
# check if the program is right
# for (i in unique(labor_filter$wkswork2)){
#   print(i)
#   print(map_weeks_func(i))
# }
labor_filter$nonlabor_income = labor_filter$ftotinc-labor_filter$incwage
labor_filter$hourly_wage = labor_filter$incwage/labor_filter$annual_hours_worked
labor_filter$log_annual_hours_worked = log(1+labor_filter$annual_hours_worked)
min_nonlabor = abs(min(labor_filter$nonlabor_income))+1
labor_filter$log_nonlabor_income = log(min_nonlabor+labor_filter$nonlabor_income)
labor_filter$log_hourly_wage = log(labor_filter$hourly_wage+1)
get_educ_years = function(my_str){
if (my_str=="grade 12"){
return(12)
}
else if (my_str=="grade 11"){
return(11)
}
else if (my_str=="4 years of college"){
return(16)
}
else if (my_str=="1 year of college"){
return(13)
}
else if (my_str=="2 years of college"){
return(14)
}
else if (my_str=="n/a or no schooling"){
return(0)
}
else if (my_str=="5+ years of college"){
return(17)
}
else if (my_str=="grade 5, 6, 7, or 8"){
return(6.5)
}
else if (my_str=="grade 10"){
return(10)
}
else if (my_str=="grade 9"){
return(9)
}
else if (my_str=="nursery school to grade 4"){
return(4)
}
else{
return(0)
}
}
labor_filter$educ_years = apply(array(labor_filter$educ),1,get_educ_years)
labor_filter$num_age =as.numeric(labor_filter$age)
labor_filter$potential_experience =  labor_filter$num_age-labor_filter$educ_years-6
labor_filter$potential_experience_sq = (labor_filter$potential_experience)*(labor_filter$potential_experience)
stata_data = labor_filter[labor_filter$wage_worker_last_year==1,]
stata_data$male_num = as.numeric(stata_data$sex=="male") # male_num==1 for male
write.dta(stata_data,"data/stata_data.dta")
colnames(stata_data)
1984-1955
knitr::opts_chunk$set(echo = TRUE)
